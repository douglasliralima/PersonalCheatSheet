'''
    Em python nos temos dois tipos de classes abstratas, a primeira √© n√£o
    restritiva o que acaba n√£o aglobando os conceitos b√°sicos de classe abstrato
    da obriga√ß√£o de incorpora√ß√£o de m√©todos a segunda √© restritiva
'''

#1¬∫ Jeito

class objetoGrafico():
    def __init__(self, cor):
        self.cor = cor
    # Declarar uma classe abstrata aqui no python, tal qual em outras linguagens
    # Basta definir a assinatura do m√©todo
    def area(self):
        pass
    def perimetro(self):
        pass
    def info(self):
        print("Area total de", self.area(), "e de perimetro", self.perimetro())

#Podemos definir a classe quadrado apenas chamados na hierarquia
class quadrado(objetoGrafico):
    pass

meuquadrado = quadrado("azul")

#----------------------------------------------------------------

#2¬∫ Forma restritiva
from abc import ABC, abstractmethod


class objetoGrafico(ABC):
    def __init__(self, cor):
        self.cor = cor
    #Definir um m√©todo com essa tag vai dar erro se o seu filho n√£o fizer um overridden
    @abstractmethod
    def area(self):
        pass
    @abstractmethod
    def perimetro(self):
        print("M√©todos abstratos podem ter algumas implementa√ß√µes")
    def info(self):
        print("Area total de", self.area(), "e de perimetro", self.perimetro())

class quadrado(objetoGrafico):
    def perimetro(self, lado):
        #E serem chamadas em suas incorpora√ß√µes
        super().perimetro()
        return lado * 4

#Vai dar erro pois n√£o incorporamos o m√©todo √°rea:
meuquadrado = quadrado("azul")

#Agora implementando todos os metodos, temos perfeitamente a implementa√ß√£o de uma classe abstrata

class quadrado(objetoGrafico):
    #Podemos definir qual deveria ser o tipo da vari·vel que queremos chamar
    def perimetro(self, lado : int):
        #E damos um erro se for passado errado, mas isso È totalmente desaconselhavel no ducktype
        if not isinstance(lado, int):
            raise TypeError
            
        super().perimetro()
        return lado * 4
    def area(self, lado : int):
        return lado * lado

meuquadrado = quadrado("azul")

print(meuquadrado.perimetro(4))

print(meuquadrado.perimetro(2.0))